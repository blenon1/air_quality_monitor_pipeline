package com.airquality.presentation

import com.airquality.domain.model._
import com.airquality.application.ProcessingResult
import com.airquality.infrastructure.metrics.ProcessingMetrics

object Dashboard {
  
  // G√©n√©ration d'un dashboard textuel simple
  def generateTextDashboard(
    recentResults: Seq[ProcessingResult],
    metrics: ProcessingMetrics,
    alerts: Seq[Alert]
  ): String = {
    val sb = new StringBuilder
    
    sb.append("‚ïê" * 80 + "\n")
    sb.append("   üå¨Ô∏è  TABLEAU DE BORD QUALIT√â DE L'AIR  üå¨Ô∏è\n")
    sb.append("‚ïê" * 80 + "\n\n")
    
    // Section m√©triques
    sb.append("üìä M√âTRIQUES TEMPS R√âEL\n")
    sb.append("‚îÄ" * 40 + "\n")
    sb.append(f"Lectures trait√©es    : ${metrics.readingsProcessed}%8d\n")
    sb.append(f"Alertes g√©n√©r√©es     : ${metrics.alertsGenerated}%8d\n")
    sb.append(f"Erreurs              : ${metrics.errors}%8d\n")
    sb.append(f"Temps moyen          : ${metrics.averageProcessingTime.toMillis}%6dms\n")
    sb.append("\n")
    
    // Section alertes actives
    val activeAlerts = alerts.filter(_.timestamp.isAfter(java.time.Instant.now().minusSeconds(3600)))
    sb.append(s"üö® ALERTES ACTIVES (${activeAlerts.length})\n")
    sb.append("‚îÄ" * 40 + "\n")
    
    if (activeAlerts.isEmpty) {
      sb.append("   ‚úÖ Aucune alerte active\n")
    } else {
      activeAlerts.take(5).foreach { alert =>
        val severityIcon = alert.severity match {
          case AlertSeverity.Emergency => "üî¥"
          case AlertSeverity.Critical => "üü†"
          case AlertSeverity.Warning => "üü°"
          case AlertSeverity.Info => "üîµ"
        }
        sb.append(f"   $severityIcon ${alert.severity.name}%-10s: ${alert.message}\n")
      }
      if (activeAlerts.length > 5) {
        sb.append(f"   ... et ${activeAlerts.length - 5} autres alertes\n")
      }
    }
    sb.append("\n")
    
    // Section qualit√© de l'air actuelle
    val latestResults = recentResults.take(5)
    sb.append("üå°Ô∏è QUALIT√â DE L'AIR R√âCENTE\n")
    sb.append("‚îÄ" * 40 + "\n")
    
    if (latestResults.isEmpty) {
      sb.append("   üì≠ Aucune donn√©e r√©cente\n")
    } else {
      latestResults.foreach { result =>
        result.aqi match {
          case Some(aqi) =>
            val categoryIcon = aqi.category match {
              case AQICategory.Good => "üü¢"
              case AQICategory.Moderate => "üü°"
              case AQICategory.UnhealthyForSensitive => "üü†"
              case AQICategory.Unhealthy => "üî¥"
              case AQICategory.VeryUnhealthy => "üü£"
              case AQICategory.Hazardous => "‚ö´"
            }
            sb.append(f"   $categoryIcon ${result.originalReading.sensorId}%-15s AQI: ${aqi.value}%6.1f (${aqi.category.name})\n")
          case None =>
            sb.append(f"   ‚ùå ${result.originalReading.sensorId}%-15s Donn√©es invalides\n")
        }
      }
    }
    sb.append("\n")
    
    // Section statistiques rapides
    if (recentResults.nonEmpty) {
      val validResults = recentResults.filter(_.aqi.isDefined)
      if (validResults.nonEmpty) {
        val avgAQI = validResults.map(_.aqi.get.value).sum / validResults.length
        val maxAQI = validResults.map(_.aqi.get.value).max
        val minAQI = validResults.map(_.aqi.get.value).min
        
        sb.append("üìà STATISTIQUES RAPIDES\n")
        sb.append("‚îÄ" * 40 + "\n")
        sb.append(f"AQI moyen            : ${avgAQI}%6.1f\n")
        sb.append(f"AQI min/max          : ${minAQI}%6.1f / ${maxAQI}%6.1f\n")
        sb.append(f"Lectures valides     : ${validResults.length}%3d / ${recentResults.length}\n")
        sb.append("\n")
      }
    }
    
    // Section recommandations
    sb.append("üí° RECOMMANDATIONS\n")
    sb.append("‚îÄ" * 40 + "\n")
    val criticalAlerts = activeAlerts.count(_.severity == AlertSeverity.Critical)
    val emergencyAlerts = activeAlerts.count(_.severity == AlertSeverity.Emergency)
    
    if (emergencyAlerts > 0) {
      sb.append("   üö® SITUATION D'URGENCE\n")
      sb.append("      ‚Ä¢ √âvitez toute activit√© ext√©rieure\n")
      sb.append("      ‚Ä¢ Fermez fen√™tres et a√©rations\n")
      sb.append("      ‚Ä¢ Consultez un m√©decin si sympt√¥mes\n")
    } else if (criticalAlerts > 0) {
      sb.append("   ‚ö†Ô∏è  POLLUTION √âLEV√âE\n")
      sb.append("      ‚Ä¢ Limitez les activit√©s ext√©rieures\n")
      sb.append("      ‚Ä¢ Portez un masque si n√©cessaire\n")
      sb.append("      ‚Ä¢ Surveillez la qualit√© de l'air\n")
    } else {
      sb.append("   ‚úÖ Conditions normales\n")
      sb.append("      ‚Ä¢ Qualit√© de l'air acceptable\n")
      sb.append("      ‚Ä¢ Activit√©s normales possibles\n")
    }
    
    sb.append("\n")
    sb.append("‚îÄ" * 80 + "\n")
    sb.append(s"Derni√®re mise √† jour: ${java.time.Instant.now()}\n")
    sb.append("‚ïê" * 80 + "\n")
    
    sb.toString()
  }
  
  // G√©n√©ration d'un r√©sum√© compact
  def generateCompactSummary(
    recentResults: Seq[ProcessingResult],
    alerts: Seq[Alert]
  ): String = {
    val validResults = recentResults.filter(_.aqi.isDefined)
    val avgAQI = if (validResults.nonEmpty) {
      Some(validResults.map(_.aqi.get.value).sum / validResults.length)
    } else None
    
    val emergencyAlerts = alerts.count(_.severity == AlertSeverity.Emergency)
    val criticalAlerts = alerts.count(_.severity == AlertSeverity.Critical)
    
    val status = if (emergencyAlerts > 0) "üö® URGENCE"
                else if (criticalAlerts > 0) "‚ö†Ô∏è CRITIQUE" 
                else "‚úÖ NORMAL"
    
    avgAQI match {
      case Some(aqi) => f"$status | AQI: $aqi%.1f | Alertes: ${alerts.length} | Lectures: ${recentResults.length}"
      case None => f"$status | Pas de donn√©es AQI | Alertes: ${alerts.length} | Lectures: ${recentResults.length}"
    }
  }
}